@model IEnumerable<HostMonitor.Models.Host>

@{
    /**/


    ViewBag.Title = "Hosts";
    HostMonitor.Models.Db l = new HostMonitor.Models.Db();
    var ho = l.Host.OrderByDescending(c => c.hostComunication);
    var computadores = l.Devices.Where(c => c.deviceName == "Desktop").Count();
    HostMonitor.Models.Db db = new HostMonitor.Models.Db();


    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem
    {
        Text = "Exemplo1",
        Value = "Exemplo1"
    });
    listItems.Add(new SelectListItem
    {
        Text = "Exemplo2",
        Value = "Exemplo2",
        Selected = true
    });
    listItems.Add(new SelectListItem
    {
        Text = "Exemplo3",
        Value = "Exemplo3"
    });

    List<SelectListItem> loaddevice()
    {
        List<SelectListItem> list = new List<SelectListItem>();
        var tipos = db.Devices.ToList();
        if (tipos != null && tipos.Count > 0)
        {
            for (int i = 0; i < tipos.Count(); i++)
            {
                list.Add(new SelectListItem
                {
                    Text = tipos[i].deviceName,
                    Value = tipos[i].deviceId.ToString()
                });

            }

            return list;
        }
        else
        {

            list.Add(new SelectListItem
            {
                Text = "Selecione",
                Value = "Selecione"
            });



            return list;
        }





    }



    var lsttip1 = db.Devices.Select(f => new { f.deviceId, f.deviceName }).ToList();



    var lsttip = new List<HostMonitor.Models.Devices>()
{
new HostMonitor.Models.Devices { deviceName = "servidor ", deviceId = 0 },

};






    int online(string comunicação)
    {
        int status = 3;
        string data = DateTime.Now.ToShortDateString() + "  " + DateTime.Now.ToLongTimeString();

        TimeSpan tempoAtendHoras = Convert.ToDateTime(data) - Convert.ToDateTime(comunicação);
        if (tempoAtendHoras.Days == 0)
        {
            if (tempoAtendHoras.Hours == 0)
            {

                if (tempoAtendHoras.Minutes <= 15)
                {
                    status = 1;
                }
                if (tempoAtendHoras.Minutes > 15 && tempoAtendHoras.Minutes <= 30)
                {
                    status = 2;
                }
                if (tempoAtendHoras.Minutes > 30)
                {
                    status = 3;
                }
            }
        }
        else
        {
            status = 3;
        }



        return status;



    }
    int rt()
    {

        string data = System.DateTime.Now.ToShortDateString();
        int hostsoff = 0;
        var hosts = l.Host.ToList();
        for (int i = 0; i < l.Host.Count(); i++)
        {


            if (online(hosts[i].hostComunication) == 3)
            {
                hostsoff++;
            }
        }


        return hostsoff;
    }
    int ra()
    {

        string data = System.DateTime.Now.ToShortDateString();
        int hosta = 0;
        var hosts = l.Host.ToList();
        for (int i = 0; i < l.Host.Count(); i++)
        {


            if (online(hosts[i].hostComunication) == 2)
            {
                hosta++;
            }
        }


        return hosta;
    }
    int ro()
    {

        string data = System.DateTime.Now.ToShortDateString();
        int hosto = 0;
        var hosts = l.Host.ToList();
        for (int i = 0; i < l.Host.Count(); i++)
        {


            if (online(hosts[i].hostComunication) == 1)
            {
                hosto++;
            }
        }


        return hosto;
    }

    int off = rt();
    int on = ro();

    int alerta = ra();

    float co = l.Host.Count();
    float pcof = 100 / co;
    pcof = pcof * off;
    int pcoff = Convert.ToInt32(pcof);


    float pconn = 100 / co;
    pconn = pconn * on;
    int pcon = Convert.ToInt32(pconn);

    float pcalertaa = 100 / co;
    pcalertaa = pcalertaa * alerta;
    int pcalerta = Convert.ToInt32(pcalertaa);



}






<hr />
<left>


        <div id="chartContainerl" class="op1" style="height: 35%;width:20%"></div>
    </left>
        


    <left><div id="chartContainerr" class="op2" style="height:  35%;width: 20%"></div></left>

    <center><div id="chartContainerc" class="op3" style="height:  35%;width: 20%"></div></center>




    <p>

    </p>
    <br />

    <br />
    <br />

    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />
    <br />

    <br />
    <br />


    <link href="~/Content/index.css" rel="stylesheet" type="text/css" />
    <link href="~/Content/st.css" rel="stylesheet" type="text/css" />

    <br />

    <br />
    <br />
    <br />



    <div class="col-md-10">

        <br />
        <br />

        @*  @Html.DropDownListFor(model => model.tipo, listItems, "-- Select Status --")*@

<br />
<br />


@*   @Html.ValidationMessageFor(model => model.sGroup, "", new { @class = "text-danger" })*@
</div>





@*<left><div id="chartContainerl" class="op1" style="height: 300px;width:40%"></div></left>*@



@*<left><div id="chartContainerr" class="op2" style="height: 300px;width:40%"></div></left>*@

























<table class="table">
    <br />
    <br />

    @Html.Label("Monitorar", htmlAttributes: new { @class = "control-label col-md-2" })
    @Html.DropDownList("teste", loaddevice(), "-- Selecione --")
    <br />
    <br />

    <tr>

        <th>
            @Html.DisplayName("Status")
        </th>

        <th>
            @Html.DisplayName("Host Name")
        </th>
        <th>
            @Html.DisplayName("IP")
        </th>
        <th>
            @Html.DisplayName("Tipo")
        </th>
        <th>
            @Html.DisplayName("Sistema Operacional")
        </th>

        <th>
            @Html.DisplayName("Usuário")
        </th>
        <th>
            @Html.DisplayName("Centro")
        </th>

        <th>
            @Html.DisplayName("Estado")
        </th>

        <th></th>
    </tr>

    @foreach (var item in ho)
    {
        <tr>
            <td>

                @if (online(item.hostComunication) == 1)
                {
                    int ij = online(item.hostComunication);
                    <div id="circulo1" title="Online"></div>
                    int i = online(item.hostComunication);
                }
                else
                {
                    if (online(item.hostComunication) == 2)
                    {
                        int ij = online(item.hostComunication);
                        <div id="circulo2" title="Alerta"></div>
                        int i = online(item.hostComunication);
                    }
                    else
                    {
                        int ij = online(item.hostComunication);
                        <div id="circulo3" title="Offline"></div>
                        int i = online(item.hostComunication);
                    }


                }

            </td>

            <td>
                @Html.DisplayFor(modelItem => item.hostName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.hostIp)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.hotDevice)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.hostSo)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.hostUser)
            </td>
            <td>
                @{
                    var st = l.centroDeCusto.Where(c => c.ccId == item.hostCc).Select(c => c.ccName).ToList();
                    if (st.Count > 0)
                    {
                        @Html.Raw(l.centroDeCusto.Where(c => c.ccId == item.hostCc).Select(c => c.ccName).SingleOrDefault().ToString())

                    }
                }
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.hostState)
            </td>

            @if (Request.IsAuthenticated)
            {
                if (User.IsInRole("administrador"))
                {


                    <td>
                        @Html.ActionLink("Editar", "Edit", new { id = item.hostId }) |
                        @Html.ActionLink("Detalhes", "Details", new { id = item.hostId }) |
                        @Html.ActionLink("Apagar", "Delete", new { id = item.hostId })
                    </td>

                }
                else
                {



                    <td>

                        @Html.ActionLink("Detalhes", "Details", new { id = item.hostId })

                    </td>


                }

            }
        </tr>}


</table>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")


    <script type="text/javascript">
        window.onload = function () {

            var chart = new CanvasJS.Chart("chartContainerl",
                {

                    title: {
                        text: ""
                    },
                    data: [
                        {
                            type: "doughnut",
                            dataPoints: [
                                { y: 60, indexLabel: "Online" },
                                { y: 40, indexLabel: "Offline" },



                            ]
                        }
                    ]
                });

            chart.render();
            //---------------------------------------------------------------------------------------------------------------------------------------------------

            var chart = new CanvasJS.Chart("chartContainerr",
                {
                    title: {
                        text: ""
                    },
                    data: [
                        {
                            type: "doughnut",
                            dataPoints: [
                                { y: 60, indexLabel: "Online" },
                                { y: 40, indexLabel: "Offline" },




                            ]
                        }
                    ]
                });

            chart.render();
            //---------------------------------------------------------------------------------------------------------------------------------------------------
            var chart = new CanvasJS.Chart("chartContainerc",
                {
                    title: {
                        text: ""
                    },
                    data: [
                        {
                            type: "doughnut",
                            dataPoints: [
                                { y: 40, indexLabel: "Online" },
                                { y: 30, indexLabel: "Offline" },
                                { y: 30, indexLabel: "Alerta" },



                            ]
                        }
                    ]
                });

            chart.render();

        }
    </script>






    <script type="text/javascript" src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>


}
